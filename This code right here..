#include <stdlib.h>
#include <iostream>
#include <windows.h>
#include <conio.h>
#include <time.h>
#include <math.h>

sử dụng không gian tên std;

void TextColor (int color)
{
	SetConsoleTextAttribute (GetStdHandle (STD_OUTPUT_HANDLE), màu);
}

void gotoXY (int cột, int dòng)
{
	COORD coord;
	coord.X = cột;
	coord.Y = dòng;
	SetConsoleCursorPosition (GetStdHandle (STD_OUTPUT_HANDLE), coord);
}

char treeKeys [] = {'0', '~', '-', '.', '.', '~', '-', '~', '-', '*', '.', '.', '~', '-', '.', '.', '~', '-', '.', '.', '~', '-', '@', '. ','. ',' ~ ',' - ','. ','. ',' ~ ',' - ','. ','. ',' ~ ',' - '};
int foliageWitch = 70;
const int ROWS = 45;          
const int COLS = 200;        
const int NRANDOM = 3;        
const int NTIMES = 450;   
const double WAIT = 200;      
const char SNOW = '*';        

int randomColor () {
	int colorArr [] = {14,12,9,13};
	int n = sizeof (colorArr) / sizeof (int);
	int res = rand ()% n;
	trả về colorArr [res];
}
bool randomStar () {
	int res = rand ()% 200;
	if (res == 1)
		trả về true;
	trả về sai;
}
void displayTree (char treeMap [ROWS] [COLS], int treeMapColor [ROWS] [COLS]) {		
    int treeKeyCount = sizeof (treeKeys) / sizeof (treeKeys [0]);   
    int pfCount = 0;
    int i = 0;
    int j = 0;
    Màu văn bản (10);
 	Màu văn bản (10);
    for (i = 0; i <ROWS; i ++) { 
    	if (i <foliageWitch) {
    		int r = -1;
    		int j = 0;
	        for (j = i; j <foliageWitch; j ++) {
	        	r ++;
	        	ký tự c;
	        	nếu (tôi <ROWS / 2)
	        	if (randomStar ()) {
	        		c = '+';
	        		Màu văn bản (14);
				}
				khác{
					c = '';
				}
	            cout << c;
	            treeMap [i] [r] = c;
	            treeMapColor [i] [r] = 14;
	        }
	        int r2 = r;
	        for (j = 0; j <COLS-r2; j ++) {
	        	r ++;
	        	if (j <(2 * i-1)) {
	        		char c = treeKeys [pfCount% treeKeyCount];
	        	if (c == '0' || c == '*' || c == '@') {
	        		int cl = randomColor ();
	        		treeMapColor [i] [r] = cl;
	        		TextColor (cl);
				}
	        	khác{
	        		Màu văn bản (10);	
	        		treeMapColor [i] [r] = 10;
				}
	            cout << c;
	            treeMap [i] [r] = c;
	            pfCount ++;
				}
				khác{
					ký tự c;
		        	nếu (tôi <ROWS / 2)
		        	if (randomStar ()) {
		        		c = '+';
		        		Màu văn bản (14);
					}
					khác{
						c = '';
					}
		            cout << c;
		            treeMap [i] [r] = c;
		            treeMapColor [i] [r] = 14;
				}
	        }
        	cout << endl;
    	}
    	khác{
    		for (int k = 0; k <COLS; k ++) {
    			cout << '';
    			treeMap [i] [k] = '';

			}
			cout << endl;
		}
    }
    Màu văn bản (8);
    for (int k = 0; k <COLS; k ++) {
    			cout << '_';
	}
}

void plot (char m [ROWS] [COLS], int topRow)
{  
	Màu văn bản (15);
    for (int i = 0; i <ROWS; i ++)
    {
      int row = (topRow + i)% ROWS;
      for (int j = 0; j <COLS; j ++) 
        if (m [row] [j] == '*') {
        	gotoXY (j, i);
	  		cout << m [row] [j];
		}
    }
    gotoXY (COLS, ROWS);
}
void clrscr (char treeMap [ROWS] [COLS], int treeMapColor [ROWS] [COLS], char m [ROWS] [COLS], int topRow, int t)
{
   for (int i = 0; i <ROWS; i ++)
   {
      int row = (topRow + i)% ROWS;
      for (int j = 0; j <COLS; j ++) 
        if (m [row] [j] == '*') {
        	gotoXY (j, i);
        	if (t <NTIMES / 2 || treeMap [i] [j] == '+')
        		TextColor (treeMapColor [i] [j]);
        	khác
        		Màu văn bản (15);
	  		cout << treeMap [i] [j];
		}
        }
}
void waitTime (double waitSecs)
{
   Ngủ (waitSecs);
}
int main () {
	srand (thời gian (NULL));
    Màu văn bản (15);
    int topRow = 0;
    char m [ROWS] [COLS] = {''};
    char treeMap [ROWS] [COLS] = {''};
    int treeMapColor [ROWS] [COLS] = {};
    displayTree (treeMap, treeMapColor);
    Ngủ (3000);
    // trả về 0;
    Màu văn bản (15);
    for (int t = 0; t <NTIMES; t ++)
    {
      âm mưu (m, topRow);
      thời gian chờ đợi (WAIT);
      clrscr (treeMap, treeMapColor, m, topRow, t);
      topRow - = 1; if (topRow <0) topRow = ROWS - 1;
      for (int j = 0; j <COLS; j ++) m [topRow] [j] = '';
      for (int r = 0; r <NRANDOM; r ++) m [topRow] [rand ()% COLS] = SNOW; 
   } 
    
}
